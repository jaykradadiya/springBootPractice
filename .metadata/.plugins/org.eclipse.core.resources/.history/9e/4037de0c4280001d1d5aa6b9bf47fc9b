package com.customer.demo;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.customer.demo.DTO.CustomerDTO;
import com.customer.demo.entity.Customer;
import com.customer.demo.repository.CustomerRepository;
import com.customer.demo.service.CustomerService;

public class CustomerServiceImp implements CustomerService {

	@Autowired
	CustomerRepository customerRepository;
	
	
	@Override
	public Customer customerToCustomerDTO(CustomerDTO customerDTO) {
		Customer customer = new Customer();
		
		if(customerDTO.getId()>0)
			customer.setId(customerDTO.getId());
		customer.setAge(customerDTO.getAge());
		customer.setEmail(customerDTO.getEmail());
		customer.setName(customerDTO.getName());
		
		return customer;
	}

	@Override
	public CustomerDTO customerDTOToCustomer(Customer customer) {
		CustomerDTO customerDTO = new CustomerDTO();
		customerDTO.setId(customer .getId());
		customerDTO.setAge(customer.getAge());
		customerDTO.setName(customer.getName());
		customerDTO.setEmail(customer.getEmail());
		return customerDTO;
	}
	
	

	@Override
	public List<CustomerDTO> findAll() {
		
		List<Customer > customers = customerRepository.findAll();
		List<CustomerDTO> customerDTO = new ArrayList<CustomerDTO>(customers.size());
		
		for(Customer customer : customers) {
			customerDTO.add(this.customerDTOToCustomer(customer));
		}
	
		return customerDTO;
	}

	@Override
	public CustomerDTO findAllById(Integer id) {
		Customer customer = customerRepository.findById(id).get();
		return this.customerDTOToCustomer(customer);
	}

	@Override
	public CustomerDTO save(CustomerDTO customerDTO) {
		
		Customer customer = this.customerToCustomerDTO(customerDTO);
		customerRepository.save(customer);
		return this.customerDTOToCustomer(customer);
	}

	@Override
	public CustomerDTO updateByID(Integer id,CustomerDTO customerDTO) {
	
		if(customerDTO.getId() == id) {
		}
		Customer customer = this.customerToCustomerDTO(customerDTO);
	
		customerRepository.save(customer);
		return this.customerDTOToCustomer(customer);
		}


	@Override
	public CustomerDTO deleteById(Integer id) {
		
		CustomerDTO customer = this.findAllById(id);
		customerRepository.deleteById(id);
		return customer;
	}

	
}
